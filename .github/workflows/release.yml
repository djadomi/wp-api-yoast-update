name: Build and Release Plugin ZIP

on:
  push:
    # Trigger the workflow only on tag pushes
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, zip

      # Step 3: Extract TAG_VERSION and set it as an environment variable
      - name: Extract TAG_VERSION
        id: extract_tag
        run: echo "TAG_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      # Step 4: Debug TAG_VERSION
      - name: Debug TAG_VERSION
        run: |
          echo "Extracted TAG_VERSION is $TAG_VERSION"
          echo "Environment TAG_VERSION is ${{ env.TAG_VERSION }}"

      # Step 5: Create the plugin ZIP file
      - name: Create plugin ZIP
        run: |
          echo "Creating ZIP file for version $TAG_VERSION"
          mkdir -p release
          zip -r release/wp-api-yoast-update-${TAG_VERSION}.zip . -x ".git/*" -x ".github/*" -x "README.md" -x "LICENSE"
        env:
          TAG_VERSION: ${{ env.TAG_VERSION }}

      # Step 6: Verify ZIP file creation
      - name: Verify ZIP file
        run: ls -l release/

      # Step 7: Debug ZIP file path
      - name: Debug ZIP file path
        run: |
          echo "Looking for file: release/wp-api-yoast-update-${{ env.TAG_VERSION }}.zip"
          ls -l release/

      # Step 8: Upload the ZIP file as a release artifact
      - name: Upload ZIP as release artifact
        uses: actions/upload-artifact@v4
        with:
          name: wp-api-yoast-update.zip
          path: release/wp-api-yoast-update-${{ env.TAG_VERSION }}.zip

      # Step 9: Create a GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: release/wp-api-yoast-update-${{ env.TAG_VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
